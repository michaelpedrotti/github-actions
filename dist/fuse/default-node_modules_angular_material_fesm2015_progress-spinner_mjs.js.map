{"version":3,"file":"default-node_modules_angular_material_fesm2015_progress-spinner_mjs.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2015/progress-spinner.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription } from 'rxjs';\nimport * as i2 from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerBase {\n    constructor(elementRef, _platform, _document, animationMode, defaults, \n    /**\n     * @deprecated `changeDetectorRef`, `viewportRuler` and `ngZone`\n     * parameters to become required.\n     * @breaking-change 14.0.0\n     */\n    changeDetectorRef, viewportRuler, ngZone) {\n        super(elementRef);\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._noopAnimations =\n            animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n        // Safari has an issue where the circle isn't positioned correctly when the page has a\n        // different zoom level from the default. This handler triggers a recalculation of the\n        // `transform-origin` when the page zoom level changes.\n        // See `_getCircleTransformOrigin` for more info.\n        // @breaking-change 14.0.0 Remove null checks for `_changeDetectorRef`,\n        // `viewportRuler` and `ngZone`.\n        if (_platform.isBrowser && _platform.SAFARI && viewportRuler && changeDetectorRef && ngZone) {\n            this._resizeSubscription = viewportRuler.change(150).subscribe(() => {\n                // When the window is resize while the spinner is in `indeterminate` mode, we\n                // have to mark for check so the transform origin of the circle can be recomputed.\n                if (this.mode === 'indeterminate') {\n                    ngZone.run(() => changeDetectorRef.markForCheck());\n                }\n            });\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() {\n        return this._diameter;\n    }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        element.classList.add('mat-progress-spinner-indeterminate-animation');\n    }\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return (this._getStrokeCircumference() * (100 - this._value)) / 100;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return (this.strokeWidth / this.diameter) * 100;\n    }\n    /** Gets the `transform-origin` for the inner circle element. */\n    _getCircleTransformOrigin(svg) {\n        var _a;\n        // Safari has an issue where the `transform-origin` doesn't work as expected when the page\n        // has a different zoom level from the default. The problem appears to be that a zoom\n        // is applied on the `svg` node itself. We can work around it by calculating the origin\n        // based on the zoom level. On all other browsers the `currentScale` appears to always be 1.\n        const scale = ((_a = svg.currentScale) !== null && _a !== void 0 ? _a : 1) * 50;\n        return `${scale}% ${scale}%`;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return (INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`));\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinner, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }, { token: i2.ViewportRuler }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatProgressSpinner.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatProgressSpinner, selector: \"mat-progress-spinner\", inputs: { color: \"color\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", mode: \"mode\", value: \"value\" }, host: { attributes: { \"role\": \"progressbar\", \"tabindex\": \"-1\" }, properties: { \"class._mat-animation-noopable\": \"_noopAnimations\", \"style.width.px\": \"diameter\", \"style.height.px\": \"diameter\", \"attr.aria-valuemin\": \"mode === \\\"determinate\\\" ? 0 : null\", \"attr.aria-valuemax\": \"mode === \\\"determinate\\\" ? 100 : null\", \"attr.aria-valuenow\": \"mode === \\\"determinate\\\" ? value : null\", \"attr.mode\": \"mode\" }, classAttribute: \"mat-progress-spinner\" }, exportAs: [\"matProgressSpinner\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"], directives: [{ type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinner, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-progress-spinner', exportAs: 'matProgressSpinner', host: {\n                        'role': 'progressbar',\n                        'class': 'mat-progress-spinner',\n                        // set tab index to -1 so screen readers will read the aria-label\n                        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                        'tabindex': '-1',\n                        '[class._mat-animation-noopable]': `_noopAnimations`,\n                        '[style.width.px]': 'diameter',\n                        '[style.height.px]': 'diameter',\n                        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                        '[attr.mode]': 'mode',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i2.ViewportRuler }, { type: i0.NgZone }];\n    }, propDecorators: { diameter: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }] } });\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    constructor(elementRef, platform, document, animationMode, defaults, \n    /**\n     * @deprecated `changeDetectorRef`, `viewportRuler` and `ngZone`\n     * parameters to become required.\n     * @breaking-change 14.0.0\n     */\n    changeDetectorRef, viewportRuler, ngZone) {\n        super(elementRef, platform, document, animationMode, defaults, changeDetectorRef, viewportRuler, ngZone);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSpinner, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }, { token: i2.ViewportRuler }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatSpinner.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatSpinner, selector: \"mat-spinner\", inputs: { color: \"color\" }, host: { attributes: { \"role\": \"progressbar\", \"mode\": \"indeterminate\" }, properties: { \"class._mat-animation-noopable\": \"_noopAnimations\", \"style.width.px\": \"diameter\", \"style.height.px\": \"diameter\" }, classAttribute: \"mat-spinner mat-progress-spinner\" }, usesInheritance: true, ngImport: i0, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"], directives: [{ type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatSpinner, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-spinner', host: {\n                        'role': 'progressbar',\n                        'mode': 'indeterminate',\n                        'class': 'mat-spinner mat-progress-spinner',\n                        '[class._mat-animation-noopable]': `_noopAnimations`,\n                        '[style.width.px]': 'diameter',\n                        '[style.height.px]': 'diameter',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i2.ViewportRuler }, { type: i0.NgZone }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatProgressSpinnerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinnerModule, declarations: [MatProgressSpinner, MatSpinner], imports: [MatCommonModule, CommonModule], exports: [MatProgressSpinner, MatSpinner, MatCommonModule] });\nMatProgressSpinnerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinnerModule, imports: [[MatCommonModule, CommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CommonModule],\n                    exports: [MatProgressSpinner, MatSpinner, MatCommonModule],\n                    declarations: [MatProgressSpinner, MatSpinner],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n"],"names":["i0","InjectionToken","Component","ChangeDetectionStrategy","ViewEncapsulation","Optional","Inject","Input","NgModule","i3","DOCUMENT","CommonModule","mixinColor","MatCommonModule","coerceNumberProperty","i1","_getShadowRoot","ANIMATION_MODULE_TYPE","Subscription","i2","BASE_SIZE","BASE_STROKE_WIDTH","_MatProgressSpinnerBase","constructor","_elementRef","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","providedIn","factory","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","diameter","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","elementRef","_platform","_document","animationMode","defaults","changeDetectorRef","viewportRuler","ngZone","_diameter","_value","_resizeSubscription","EMPTY","mode","trackedDiameters","_diameters","_spinnerAnimationLabel","_getSpinnerAnimationLabel","has","head","set","Set","_noopAnimations","_forceAnimations","strokeWidth","isBrowser","SAFARI","change","subscribe","run","markForCheck","size","_styleRoot","_attachStyleNode","_strokeWidth","value","newValue","Math","max","min","ngOnInit","element","nativeElement","classList","add","ngOnDestroy","unsubscribe","_getCircleRadius","_getViewBox","viewBox","_getStrokeCircumference","PI","_getStrokeDashOffset","_getCircleStrokeWidth","_getCircleTransformOrigin","svg","_a","scale","currentScale","styleRoot","currentDiameter","diameters","diametersForElement","get","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","strokeCircumference","replace","toString","WeakMap","ɵfac","ElementRef","Platform","ChangeDetectorRef","ViewportRuler","NgZone","ɵcmp","NgSwitch","NgSwitchCase","type","args","selector","exportAs","host","inputs","changeDetection","OnPush","encapsulation","None","template","styles","undefined","decorators","MatSpinner","platform","document","MatProgressSpinnerModule","ɵmod","ɵinj","imports","exports","declarations"],"sourceRoot":"webpack:///"}